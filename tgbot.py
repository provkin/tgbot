import os
import logging
import pandas as pd
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)
import yadisk
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0)) 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
y = yadisk.YaDisk(token=YANDEX_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    NAME, SURNAME, PHONE, SOURCE, PHOTO, COURSE,
    PAYMENT_AMOUNT, PAYMENT_PROOF,
    EVENT_NAME, EVENT_DATE, EVENT_TIME, EVENT_DETAILS
) = range(12)

# –°—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–æ–≤
COURSES = {
    "intensive": 34000,
    "basic": 72000,
    "advanced": 80000,
    "master": 90000,
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
PROFILE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
     InlineKeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="events")],
    [InlineKeyboardButton("üë©üè´ –ü–µ–¥–∞–≥–æ–≥–∏", callback_data="teachers"),
     InlineKeyboardButton("üéì –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫—É—Ä—Å", callback_data="change_course")]
])

ADMIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event"),
     InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")]
])

def save_to_table(data, table_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ"""
    temp_file = "temp.xlsx"
    try:
        y.download(table_path, temp_file)
        df = pd.read_excel(temp_file)
    except:
        df = pd.DataFrame()

    df = pd.concat([df, pd.DataFrame([data])], ignore_index=True)
    df.to_excel(temp_file, index=False)
    y.upload(temp_file, table_path, overwrite=True)
    os.remove(temp_file)

async def notify_admin(context, message, photo_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        if photo_url:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo_url,
                caption=message
            )
        else:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=message
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    if user.id == ADMIN_ID:
        await update.message.reply_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=ADMIN_KEYBOARD)
        return ConversationHandler.END
    else:
        context.user_data.clear()
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return NAME

async def get_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return SURNAME

async def get_surname(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    context.user_data["surname"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ —à–∫–æ–ª–µ?")
    return SOURCE

async def get_source(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    context.user_data["source"] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
    return PHOTO

async def get_photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    try:
        photo = await update.message.photo[-1].get_file()
        local_path = f"temp/{update.message.message_id}.jpg"
        os.makedirs("temp", exist_ok=True)
        await photo.download_to_drive(local_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = f"{context.user_data['name']}_{context.user_data['surname']}_{timestamp}.jpg"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –ü–ª–∞—Ç–µ–∂–∏
        y.upload(local_path, f"/–ü–ª–∞—Ç–µ–∂–∏/{file_name}")
        os.remove(local_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: {context.user_data['name']} {context.user_data['surname']}\n"
            f"–ö—É—Ä—Å: {context.user_data['course']}\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} —Ä—É–±\n"
            f"–°–∫—Ä–∏–Ω—à–æ—Ç: {y.get_download_link(f'/–ü–ª–∞—Ç–µ–∂–∏/{file_name}')}"
        )
        
        await notify_admin(context, admin_msg)
        await update.message.reply_text("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=PROFILE_KEYBOARD)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        return ConversationHandler.END

async def get_course(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    query = update.callback_query
    await query.answer()
    course = query.data
    context.user_data["course"] = course
    context.user_data["balance"] = -COURSES[course]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    student_data = {
        "–ò–º—è": context.user_data["name"],
        "–§–∞–º–∏–ª–∏—è": context.user_data["surname"],
        "–¢–µ–ª–µ—Ñ–æ–Ω": context.user_data["phone"],
        "–ö—É—Ä—Å": course,
        "–ë–∞–ª–∞–Ω—Å": -COURSES[course],
        "user_id": query.from_user.id
    }
    
    save_to_table(student_data, "/–¢–∞–±–ª–∏—Ü—ã/–°—Ç—É–¥–µ–Ω—Ç—ã.xlsx")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await notify_admin(
        context,
        f"üéì –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç:\n{student_data['–ò–º—è']} {student_data['–§–∞–º–∏–ª–∏—è']}\n"
        f"–ö—É—Ä—Å: {course}\n–ë–∞–ª–∞–Ω—Å: {student_data['–ë–∞–ª–∞–Ω—Å']} —Ä—É–±",
        y.get_download_link(f"/–§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤/{context.user_data['name']}_{context.user_data['surname']}.jpg")
    )
    
    await query.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
        reply_markup=PROFILE_KEYBOARD
    )
    return ConversationHandler.END

def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_source)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            COURSE: [CallbackQueryHandler(get_course)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    for folder in ["–§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", "–ü–ª–∞—Ç–µ–∂–∏", "–¢–∞–±–ª–∏—Ü—ã"]:
        if not y.exists(folder):
            y.mkdir(folder)
    
    main()
