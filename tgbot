import os
import logging
import pandas as pd
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)
import yadisk
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
y = yadisk.YaDisk(token=YANDEX_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    NAME, SURNAME, PHONE, SOURCE, PHOTO, COURSE,
    PAYMENT_AMOUNT, PAYMENT_PROOF,
    EVENT_NAME, EVENT_DATE, EVENT_TIME, EVENT_DETAILS
) = range(12)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COURSES = {
    "intensive": 34000,
    "basic": 72000,
    "advanced": 80000,
    "master": 90000,
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
PROFILE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
     InlineKeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="events")],
    [InlineKeyboardButton("üë©üè´ –ü–µ–¥–∞–≥–æ–≥–∏", callback_data="teachers"),
     InlineKeyboardButton("üéì –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫—É—Ä—Å", callback_data="change_course")]
])

ADMIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event"),
     InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")]
])

def save_to_table(data, table_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ"""
    temp_file = "temp.xlsx"
    try:
        y.download(table_path, temp_file)
        df = pd.read_excel(temp_file)
    except:
        df = pd.DataFrame()

    df = pd.concat([df, pd.DataFrame([data])], ignore_index=True)
    df.to_excel(temp_file, index=False)
    y.upload(temp_file, table_path, overwrite=True)
    os.remove(temp_file)

async def notify_admin(context, message, photo_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        if photo_url:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo_url,
                caption=message
            )
        else:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=message
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    if user.id == ADMIN_ID:
        await update.message.reply_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=ADMIN_KEYBOARD)
        return ConversationHandler.END
    else:
        context.user_data.clear()
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return NAME

async def get_photo(update: Update, context: CallbackContext):
    try:
        photo = await update.message.photo[-1].get_file()
        local_path = f"temp/{update.message.message_id}.jpg"
        os.makedirs("temp", exist_ok=True)
        await photo.download_to_drive(local_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = f"{context.user_data['name']}_{context.user_data['surname']}_{timestamp}.jpg"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –ü–ª–∞—Ç–µ–∂–∏
        y.upload(local_path, f"/–ü–ª–∞—Ç–µ–∂–∏/{file_name}")
        os.remove(local_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: {context.user_data['name']} {context.user_data['surname']}\n"
            f"–ö—É—Ä—Å: {context.user_data['course']}\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} —Ä—É–±\n"
            f"–°–∫—Ä–∏–Ω—à–æ—Ç: {y.get_download_link(f'/–ü–ª–∞—Ç–µ–∂–∏/{file_name}')}"
        )
        
        await notify_admin(context, admin_msg)
        await update.message.reply_text("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=PROFILE_KEYBOARD)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        return ConversationHandler.END

async def handle_admin_reply(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂–∏"""
    try:
        if update.message.reply_to_message and update.message.from_user.id == ADMIN_ID:
            # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            amount = int(update.message.text)
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            original_text = update.message.reply_to_message.text
            user_id = int(original_text.split("ID: ")[1].split("\n")[0])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
            temp_file = "temp_students.xlsx"
            y.download("/–¢–∞–±–ª–∏—Ü—ã/–°—Ç—É–¥–µ–Ω—Ç—ã.xlsx", temp_file)
            df = pd.read_excel(temp_file)
            
            df.loc[df["user_id"] == user_id, "–ë–∞–ª–∞–Ω—Å"] += amount
            df.to_excel(temp_file, index=False)
            y.upload(temp_file, "/–¢–∞–±–ª–∏—Ü—ã/–°—Ç—É–¥–µ–Ω—Ç—ã.xlsx", overwrite=True)
            os.remove(temp_file)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            new_balance = df.loc[df["user_id"] == user_id, "–ë–∞–ª–∞–Ω—Å"].values[0]
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±",
                reply_markup=PROFILE_KEYBOARD
            )
            
            await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º: {str(e)}")

async def show_events(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"""
    try:
        temp_file = "temp_events.xlsx"
        y.download("/–¢–∞–±–ª–∏—Ü—ã/–°–æ–±—ã—Ç–∏—è.xlsx", temp_file)
        df = pd.read_excel(temp_file)
        
        if df.empty:
            await update.callback_query.message.reply_text("–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
            return
        
        events_list = []
        for _, row in df.iterrows():
            events_list.append(
                f"üìÖ {row['–î–∞—Ç–∞']} {row['–í—Ä–µ–º—è']}\n"
                f"üè∑ {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
                f"üìù {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
            )
            
        await update.callback_query.message.reply_text("\n\n".join(events_list))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π")

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_source)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            COURSE: [CallbackQueryHandler(get_course)],
        },
        fallbacks=[]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(show_events, pattern="^events$"))
    application.add_handler(MessageHandler(filters.TEXT & filters.user(ADMIN_ID), handle_admin_reply))

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    for folder in ["–§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", "–ü–ª–∞—Ç–µ–∂–∏", "–¢–∞–±–ª–∏—Ü—ã"]:
        if not y.exists(folder):
            y.mkdir(folder)
    
    main()
